{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","props","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","setCategories","cats","type","value","onChange","target","GifGridItem","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","id","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAMaA,EAAc,SAAEC,GAAW,MAEAC,mBAAS,IAFT,mBAE7BC,EAF6B,KAEjBC,EAFiB,KAmBpC,OAEQ,sBAAMC,SAbO,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAE3BR,EAAMS,eAAe,SAAAC,GAAI,OAAMR,GAAN,mBAAqBQ,OAC9CP,EAAc,MAOd,SACI,uBAAOQ,KAAK,OAAOC,MAAQV,EAAaW,SAlB1B,SAACR,GACvBF,EAAcE,EAAES,OAAOF,a,QCTlBG,EAAc,SAAC,GAAsB,IAAnBC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,IAClC,OACI,sBAAKC,UAAU,6CAAf,UACI,qBAAKC,IAAOF,EAAMG,IAAOJ,IACzB,kCAAMA,EAAN,W,uBCJCK,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAGbN,EAHa,iDAGoCO,UAAUF,GAH9C,+DAIAG,MAAOR,GAJP,cAIbS,EAJa,gBAKEA,EAAKC,OALP,uBAKZC,EALY,EAKZA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GACnB,MAAO,CACHC,GAAID,EAAIC,GACRhB,MAAOe,EAAIf,MACXC,IAAKc,EAAIE,OAAOC,iBAAiBjB,QAXtB,kBAeZY,GAfY,4CAAH,sDCIPM,EAAU,SAAC,GAAkB,IAAhBb,EAAe,EAAfA,SAAe,ECFb,SAAEA,GAAe,IAAD,EAEdrB,mBAAS,CAC/B2B,KAAM,GACNQ,SAAS,IAJ2B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAoBxC,OAbAC,qBAAW,WAEPlB,EAASC,GACJkB,MAAM,SAAAC,GACHH,EAAS,CACLV,KAAMa,EACNL,SAAS,SAKtB,CAAEd,IAEEe,EDd0BK,CAAcpB,GAAjCW,EAJuB,EAI7BL,KAAcQ,EAJe,EAIfA,QAWtB,OACI,qCACI,mCAAOd,EAAP,OAEEc,GAAW,2CAGb,qBAAKlB,UAAU,YAAf,SAGQe,EAAOH,KAAK,SAACC,GACT,OAAO,cAAC,EAAD,eAAiCA,GAAbA,EAAIC,aE3B1CW,EAAe,WAAK,MAIO1C,mBAAS,CAAC,gBAJjB,mBAItB2C,EAJsB,KAIVnC,EAJU,KAa7B,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAGA,6BAEQmC,EAAWd,KAAK,SAACR,GACb,OAAO,cAAC,EAAD,CAA2BA,SAAWA,GAAvBA,Y,MCtB9CuB,IAASC,OAEL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.81fedb6c.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\n\r\nexport const AddCategory = ( props ) => {   // se puede con props.categories o se pone ({categories}) \r\n\r\n    const [inputValue, setInputValue] = useState('')\r\n\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value)\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if( inputValue.trim().length > 2 ) {            //.trim()  borra los espacios al principio y final\r\n            \r\n            props.setCategories( cats => [ inputValue, ...cats ] );\r\n            setInputValue('')\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        \r\n            <form onSubmit= { handleSubmit } >\r\n                <input type='text' value={ inputValue } onChange={ handleInputChange } />\r\n\r\n            </form>\r\n        \r\n    )\r\n};\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n};\r\n","import React from 'react'\r\n\r\nexport const GifGridItem = ( { title, url } ) => {\r\n    return (\r\n        <div className='card animate__animated animate__zoomInDown' >\r\n            <img src= { url } alt= { title } />\r\n            <p> { title } </p>\r\n        </div>\r\n    )\r\n}\r\n","\r\n\r\nexport const getGifs = async( category ) => {\r\n\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=YoiOPaYuDMDlxPUtRURdOjCxQXM8dBCO`\r\n    const resp = await fetch( url );\r\n    const {data} = await resp.json();  // pongo { data } porque me interesa data.data\r\n\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images.downsized_medium.url,\r\n        }\r\n    })\r\n\r\n    return gifs;\r\n\r\n}\r\n","// import React, { useState, useEffect } from 'react'\r\n// import { getGifs } from '../helpers/getGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nimport { useFetchGifs } from \"../hooks/useFetchGifs\"\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    // const [images, setImages] = useState([])\r\n\r\n    const { data: images, loading} = useFetchGifs( category );\r\n\r\n\r\n\r\n    // useEffect( ()=> {\r\n    //     getGifs( category )\r\n    //     .then( imgs => setImages( imgs ) )\r\n    // }, [ category ])\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <h3> { category } </h3>\r\n\r\n            { loading && <p>Loading...</p> }   \r\n            {/* si loading es true hace lo otro */}\r\n\r\n            <div className='card-grid' >\r\n            \r\n                {\r\n                    images.map( (img)=> {\r\n                        return <GifGridItem  key={ img.id } {...img} />\r\n                    })\r\n                }\r\n                \r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport { getGifs } from '../helpers/getGifs'\r\n\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect( () => {\r\n\r\n        getGifs( category )\r\n            .then( imgs => {\r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                })\r\n            } )\r\n\r\n\r\n    }, [ category ] )\r\n\r\n    return state;\r\n\r\n}","import React, { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\n\r\nexport const GifExpertApp = ()=> {\r\n\r\n    // const categories = ['one punch', 'samurai', 'dragon ball' ]\r\n    \r\n    const [categories, setCategories] = useState(['dragon ball' ])\r\n\r\n\r\n    // const handleAdd = ()=> {\r\n\r\n    //     setCategories( [...categories, 'hunter'] )\r\n\r\n    // }\r\n\r\n    return(\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={ setCategories } />\r\n            <hr></hr>\r\n\r\n\r\n            <ol>\r\n                {\r\n                    categories.map( (category) => {\r\n                        return <GifGrid key={ category }  category={ category } />\r\n                    })\r\n                }\r\n            </ol>\r\n\r\n        </>)\r\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\n\nReactDOM.render(\n  \n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n\n\n"],"sourceRoot":""}